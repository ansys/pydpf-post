name: CI Release

on:
  push:
    tags:
      - "v*"
  schedule:
    - cron: "0 13 * * 0"
  workflow_dispatch:
    inputs:
      standalone_branch_suffix:
        description: 'Suffix of the branch on standalone'
        required: false
        default: ''
      ansys_version:
        description: "ANSYS version"
        required: false
        type: string

#┌───────────── minute (0 - 59)
#│ ┌───────────── hour (0 - 23)
#│ │ ┌───────────── day of the month (1 - 31)
#│ │ │ ┌───────────── month (1 - 12)
#│ │ │ │ ┌───────────── day of the week (0 - 6), 0 being Sunday
#│ │ │ │ │
#│ │ │ │ │
#│ │ │ │ │
#* * * * *

env:
  PACKAGE_NAME: 'ansys-dpf-post'
  MODULE: 'post'
  DOCUMENTATION_CNAME: 'post.docs.pyansys.com'
  MAIN_PYTHON_VERSION: '3.10'

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Show the Github context for the triggered event
      run: echo "$GITHUB_CONTEXT"
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

  style:
    name: "Style Check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: "Setup Python"
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install pre-commit"
        run: pip install pre-commit

      - name: "Run pre-commit"
        run: pre-commit run --all-files --show-diff-on-failure

  tests:
    name: tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: ["windows-latest", "ubuntu-22.04"]

    steps:
      - uses: actions/checkout@v5

      - name: "Set licensing if necessary"
        if: ${{ (github.event.inputs.ansys_version || vars.ANSYS_VERSION_LAST_RELEASED) > '231' }}
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Build Package"
        uses: ansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{ github.event.inputs.ansys_version || vars.ANSYS_VERSION_LAST_RELEASED }}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.PYANSYS_CI_BOT_TOKEN}}
          install_extras: graphics
          # Upload the wheel artifact for only one of the OS as it is OS-agnostic
          wheel: ${{ (matrix.python-version == env.MAIN_PYTHON_VERSION) && (matrix.os == 'windows-latest') }}
          wheelhouse: true
          standalone_suffix: ${{ github.event.inputs.standalone_branch_suffix || '' }}

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@dependencies/bump_pyvista_setup-headless-display-action_to_v4
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Test Docstrings"
        uses: ansys/pydpf-actions/test_docstrings@v2.3
        with:
          MODULE: ${{env.MODULE}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          working-directory: src

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ env.ANSYS_VERSION }}
          path: tests/junit/test-results.xml

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v5

  retro:
    name: "Retro-compatibility"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        os: ["windows-latest", "ubuntu-22.04"]
        ANSYS_VERSION: ${{ fromJson(vars.ANSYS_VERSIONS_RETRO) }}

    steps:
      - uses: actions/checkout@v5

      - name: "Set licensing if necessary"
        if: matrix.ANSYS_VERSION > 231
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV
          echo "ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }}" >> $GITHUB_ENV

      - name: "Build Package"
        uses: ansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{matrix.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.PYANSYS_CI_BOT_TOKEN}}
          install_extras: graphics
          wheel: false
          extra-pip-args: ${{ env.extra }}

      - name: "Prepare Testing Environment"
        uses: ansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "List installed packages"
        shell: bash
        run: pip list

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: ansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ matrix.ANSYS_VERSION }}
          path: tests/junit/test-results.xml
        if: always()

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v5

  examples:
    uses: ./.github/workflows/examples.yml
    with:
      ANSYS_VERSION: ${{ github.event.inputs.ansys_version || vars.ANSYS_VERSION_LAST_RELEASED }}
      python_versions: '["3.10"]'
      standalone_suffix: ${{ github.event.inputs.standalone_branch_suffix || '' }}
    secrets: inherit

  docs:
    uses: ./.github/workflows/docs.yml
    with:
      ANSYS_VERSION: ${{ github.event.inputs.ansys_version || vars.ANSYS_VERSION_LAST_RELEASED }}
      python_version: "3.10"
      standalone_suffix: ${{ github.event.inputs.standalone_branch_suffix || '' }}
      event_name: ${{ github.event_name }}
    secrets: inherit

  draft_release:
    name: "Draft release"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [style, tests, retro, examples, docs]
    runs-on: ubuntu-latest
    steps:
      - name: "Download artifacts"
        uses: actions/download-artifact@v5

      - name: "Display downloaded files"
        run: ls -R

      - name: "Create draft release"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip
          draft: true
          generate_release_notes: true
