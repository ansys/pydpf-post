name: GitHub Actions

on:
  pull_request:
    branches-ignore:
      - "*no-ci"

  push:
    tags:
      - "*"
    branches:
      - master
      - "release*"
      - "ci/*"

env:
  PYANSYS_OFF_SCREEN: True
  DPF_PORT: 32772
  PACKAGE_NAME: ansys-dpf-post

jobs:
  windows-2019_Py3_8:
    name: Windows 2019 Python 3.8
    runs-on: windows-2019

    env:
      ANSYS_VERSION: 221

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: 3.8

      - id: install-dpf
        uses: pyansys/pydpf-actions/install-dpf-server@v1
        with:
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          ANSYS_VERSION : ${{env.ANSYS_VERSION}}

      - name: Set AWP_ROOT$env:ANSYS_VERSION
        run: |
          echo AWP_ROOT$env:ANSYS_VERSION
          echo "AWP_ROOT$env:ANSYS_VERSION=${{ steps.install-dpf.outputs.SERVER }}"  | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Install ansys-dpf-post
        shell: cmd
        run: |
          pip install -r requirements_build.txt
          python setup.py bdist_wheel
          FOR /F %%a in ('dir /s/b dist\*.whl') do SET WHEELPATH=%%a
          ECHO %WHEELPATH%
          cd tests
          pip install %WHEELPATH%

      - name: Test import
        working-directory: tests
        run: python -c "from ansys.dpf import post; print(post.Report(gpu=False))"

      - name: Check licences of packages
        run: |
          pip install pip-licenses
          pip-licenses
          pip uninstall -y pip-licenses

      - name: Retrieve PyDPF-Post version
        run: |
          echo "::set-output name=VERSION::$(python -c "from ansys.dpf.post import __version__; print(__version__)")"
          echo "PyDPF-Post version is: $(python -c "from ansys.dpf.post import __version__; print(__version__)")"
        id: version

      - name: Upload wheel to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}_wheel
          path: ./dist/*

      - name: Generate wheelhouse
        run: pip wheel . -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-3.8.zip

      - name: Upload wheelhouse to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-3.8
          path: '*.zip'
          retention-days: 7

      - name: Install OpenGL
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $PSDefaultParameterValues['*:ErrorAction']='Stop'
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install test offscreen rendering
        run: |
          .ci/setup_headless_display.sh
          pip install -r .ci/requirements_test_xvfb.txt
          python .ci/display_test.py

      - name: Install Test Environment
        run: |
          pip install -r requirements_test.txt
        if: always()

      - name: Test API Docstrings
        run: |
           pytest --doctest-modules --junitxml=junit/test-doctests-results.xml ansys/dpf/post

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Publish Doc Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}_doctest
          path: junit/test-doctests-results.xml
        if: always()

      - name: Test Post API
        run: |
          cd tests
          pytest --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: Kill all servers
        shell: cmd
        run: |
          tasklist /FI "IMAGENAME eq Ans.Dpf.Grpc.exe" 2>NUL | find /I /N "Ans.Dpf.Grpc.exe">NUL
          ECHO %ERRORLEVEL%
          if "%ERRORLEVEL%"=="0"(taskkill /f /im Ans.Dpf.Grpc.exe)
        continue-on-error: true

      - name: Publish Test Results
        uses: actions/upload-artifact@v2
        with:
          name: ansys_dpf_post_pytest
          path: tests/junit/test-results.xml
        if: always()

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [windows-2019_Py3_8]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Install twine
        shell: cmd
        run: |
          python -m pip install --upgrade pip
          pip install setuptools twine

      - name: Build package
        run: python setup.py sdist

      - name: Publish distribution ðŸ“¦ to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
        run: |
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
#         /!\ Do NOT publish to Pypi the zip containing the wheelhouses

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf
            ./**/*.zip