name: GitHub Actions

on:
  pull_request:
    branches-ignore:
      - "*no-ci"
  push:
    tags:
      - "v*"
    branches:
      - master
      - "release*"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ansys-dpf-post
  MODULE: post
  ANSYS_VERSION: 231
  DOCUMENTATION_CNAME: 'post.docs.pyansys.com'

jobs:
  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4.3.1
        with:
          python-version: 3.9
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  build_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: ["windows-latest", "ubuntu-latest"]

    steps:
      - uses: actions/checkout@v3

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheelhouse: true

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "Test Docstrings"
        uses: pyansys/pydpf-actions/test_docstrings@v2.3
        with:
          MODULE: ${{env.MODULE}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          working-directory: src

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ env.ANSYS_VERSION }}
          path: tests/junit/test-results.xml

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3

  retro:
    name: "Retro-compatibility"
    if: startsWith(github.head_ref, 'master') || contains(github.head_ref, 'release') || contains(github.head_ref, 'retro') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7"]
        os: ["windows-latest", "ubuntu-latest"]
        ANSYS_VERSION: ["222", "221"]

    steps:
      - uses: actions/checkout@v3

      - name: "Build Package"
        uses: pyansys/pydpf-actions/build_package@v2.3
        with:
          python-version: ${{ matrix.python-version }}
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          wheel: false
          extra-pip-args: ${{ env.extra }}

      - name: "Install ansys-grpc-dpf==0.4.0"
        shell: bash
        run: |
          pip install ansys-grpc-dpf==0.4.0
        if: matrix.ANSYS_VERSION == '221'

      - name: "Prepare Testing Environment"
        uses: pyansys/pydpf-actions/prepare_tests@v2.3
        with:
          DEBUG: true

      - name: "Test API"
        shell: bash
        working-directory: tests
        run: |
          pytest $DEBUG --cov=ansys.dpf.${{env.MODULE}} --cov-report=xml --cov-report=html --cov-append --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

      - name: "Kill all servers"
        uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
        if: always()

      - name: "Upload Test Results"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ matrix.python-version }}_${{ matrix.os }}_pytest_${{ env.ANSYS_VERSION }}
          path: tests/junit/test-results.xml
        if: always()

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3

  docs-style:
    name: "Check doc style"
    uses: ./.github/workflows/docs-style.yml
    secrets: inherit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [docs-style]

    steps:
      - uses: actions/checkout@v3

      - name: "Build Documentation"
        uses: pyansys/pydpf-actions/build_doc@v2.3
        with:
          python-version: "3.8"
          ANSYS_VERSION: ${{env.ANSYS_VERSION}}
          PACKAGE_NAME: ${{env.PACKAGE_NAME}}
          MODULE: ${{env.MODULE}}
          dpf-standalone-TOKEN: ${{secrets.DPF_PIPELINE}}
          install_extras: plotting
          debug: true
        timeout-minutes: 30

      - name: "Upload HTML documentation artifact"
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: docs/build/html
          retention-days: 7

  upload_dev_docs:
    name: "Upload dev documentation"
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [docs]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v2
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  draft_release:
    name: "Draft release"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [style, build_test, retro, docs]
    runs-on: ubuntu-latest
    steps:
      - name: "Set up Python"
        uses: actions/setup-python@v4.3.1
        with:
          python-version: 3.9

      - name: "Download artifacts"
        uses: actions/download-artifact@v3

      - name: "Display downloaded files"
        run: ls -R

      - name: "Create draft release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.zip
          draft: true
          generate_release_notes: true

#      - name: "Deploy to Test PyPi"
#        run: |
#          pip install twine
#          twine upload --repository testpypi --skip-existing ./**/*.whl
#          twine upload --repository testpypi --skip-existing ./**/*.tar.gz
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
