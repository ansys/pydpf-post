name: "Build and Test"
description: "Builds and Tests the package"
inputs:
  python-version:
    description: "Python version"
    required: true
    default: "3.8"
  ANSYS_VERSION:
    description: "Ansys release version number in the format 221"
    required: true
  PACKAGE_NAME:
    description: "Package name"
    required: true
  MODULE:
    description: "Module name"
    required: true
    default: post
  dpf-standalone-TOKEN:
    description: "Token for DPF installation"
    required: true
  install_extras:
    description: "Extras to install for the local package"
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v2.1.4
      with:
        python-version: ${{ inputs.python-version }}

    - name: install-dpf
      uses: pyansys/pydpf-actions/install-dpf-server@v1
      with:
        dpf-standalone-TOKEN: ${{inputs.dpf-standalone-TOKEN}}
        ANSYS_VERSION : ${{inputs.ANSYS_VERSION}}

    - name: Install local package
      shell: bash
      run: |
        pip install -r requirements_build.txt
        python setup.py bdist_wheel
        export WHEEL_NAME=`ls dist/*.whl`
        echo ${WHEEL_NAME}
        pip install ${WHEEL_NAME}
        cd tests

    - name: Install extras
      shell: bash
      run: |
        pip install .[${{inputs.install_extras}}]
      if: ${{inputs.install_extras}} != null

    - name: Check licences of packages
      shell: bash
      run: |
        pip install pip-licenses
        pip-licenses
        pip uninstall -y pip-licenses

    - name: Test import
      shell: bash
      working-directory: tests
      run: python -c "from ansys.dpf import ${{inputs.MODULE}}; print(${{inputs.MODULE}}.Report(gpu=False))"

    - name: Retrieve package version
      shell: bash
      run: |
        echo "::set-output name=VERSION::$(python -c "from ansys.dpf.${{inputs.MODULE}} import __version__; print(__version__)")"
        echo "${{inputs.PACKAGE_NAME}} version is: $(python -c "from ansys.dpf.${{inputs.MODULE}} import __version__; print(__version__)")"
      id: version

    - name: Upload wheel to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}_wheel
        path: ./dist/*

# ##################################################################
#    - name: Install OpenGL for off-screen
#      shell: pwsh
#      run: |
#        Set-StrictMode -Version Latest
#        $ErrorActionPreference = "Stop"
#        $PSDefaultParameterValues['*:ErrorAction']='Stop'
#        git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
#        .\gl-ci-helpers\appveyor\install_opengl.ps1
#
#    - name: Install Linux off-screen packages
#      shell: bash
#      run: |
#        sudo apt update
#        sudo apt install zip pandoc libgl1-mesa-glx xvfb
#      if: runner.os == 'Linux'
#
#    - name: Install and test off-screen rendering
#      shell: bash
#      run: |
#        ls -lh .ci
#        chmod +x .ci/setup_headless_display.sh
#        .ci/setup_headless_display.sh
#        pip install -r .ci/requirements_test_xvfb.txt
#        python .ci/display_test.py

    - name: Setup headless display
      uses: pyvista/setup-headless-display-action@v1
# ##################################################################

    - name: Install Test Environment
      shell: bash
      run: |
        pip install -r requirements_test.txt

    - name: Test API Docstrings
      shell: bash
      run: |
        pytest --doctest-modules --junitxml=junit/test-doctests-results.xml ansys/dpf/${{inputs.MODULE}}

    - name: Kill all servers
      shell: bash
      run: |
        echo $0
        if pgrep -x "Ans.Dpf.Grpc" > /dev/null
        then
            pkill -f Ans.Dpf.Grpc.exe || true
        fi        

    - name: Publish Doc Test Results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.PACKAGE_NAME }}_doctest
        path: junit/test-doctests-results.xml

    - name: Test API
      shell: bash
      run: |
        cd tests
        pytest -v --cov=ansys.dpf.post --cov-report=xml --cov-report=html --log-level=ERROR --junitxml=junit/test-results.xml --reruns 2 .

    - name: Kill all servers
      shell: bash
      run: |
        echo $0
        if pgrep -x "Ans.Dpf.Grpc" > /dev/null
        then
            pkill -f Ans.Dpf.Grpc.exe || true
        fi        

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      if: ${{ inputs.python-version }} == '3.8'

    - name: Publish Test Results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.PACKAGE_NAME }}_pytest
        path: tests/junit/test-results.xml
      if: always()