
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/05-Legacy/06-complex_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_05-Legacy_06-complex_results.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05-Legacy_06-complex_results.py:


.. _ref_complex_results:

Access complex results from a modal or harmonic analysis
--------------------------------------------------------
This example shows how to use the legacy PyDPF-Post API to access complex results
from a modal or harmonic analysis.

.. GENERATED FROM PYTHON SOURCE LINES 33-37

Perform required imports
------------------------
Perform required imports. This example uses a supplied file that you can
get by importing the DPF ``examples`` package.

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: Python


    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 42-45

Get ``Solution`` object
-----------------------
Get the ``Solution`` object. This example loads a file with complex results.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: Python


    solution = post.load_solution(examples.complex_rst)
    solution.has_complex_result()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 50-54

Get displacement result
-----------------------
The displacement result contain a field for real values and a field for
imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: Python


    disp_result = solution.displacement()








.. GENERATED FROM PYTHON SOURCE LINES 58-60

Check for support of complex frequencies
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    disp_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 64-66

Compute result
--------------

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: Python

    disp = disp_result.vector
    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 70-73

Define phase
------------
The phase value must be a float. The phase unit is degrees.

.. GENERATED FROM PYTHON SOURCE LINES 73-83

.. code-block:: Python


    phase = 39.0
    disp_at_phase = disp_result.vector_at_phase(phase)
    print(f"Maximum displacement at phase {phase}: ", disp_at_phase.max_data)
    print(f"There are {disp_at_phase.num_fields} fields")
    real_field = disp_result.vector_at_phase(0.0)
    img_field = disp_result.vector_at_phase(90.0)

    real_field





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Maximum displacement at phase 39.0:  [[2.15187123e-09 2.15185939e-09 3.19282171e-10]]
    There are 1 fields

    <ansys.dpf.post.result_data.ResultData object at 0x7fbf0bec9d50>



.. GENERATED FROM PYTHON SOURCE LINES 84-86

Get amplitude
-------------

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python


    disp_ampl = disp_result.vector_amplitude
    disp_ampl.num_fields
    disp_ampl.max_data




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[2.76946052e-09, 2.76952555e-09, 4.10914321e-10]])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.100 seconds)


.. _sphx_glr_download_examples_05-Legacy_06-complex_results.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 06-complex_results.ipynb <06-complex_results.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 06-complex_results.py <06-complex_results.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 06-complex_results.zip <06-complex_results.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
