
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-Legacy/03-modal-analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-Legacy_03-modal-analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-Legacy_03-modal-analysis.py:


.. _ref_modal_analysis:

Modal analysis
==============
This example shows how you can post-process the result file for a modal analysis
using PyDPF-Post.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

Perform required imports
------------------------
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 19-23

Get ``Solution`` object
-----------------------
Get the ``Solution`` object. This example loads a result file for a modal analysis
computed in Ansys Mechanical.

.. GENERATED FROM PYTHON SOURCE LINES 23-30

.. code-block:: default


    example_path = examples.download_all_kinds_of_complexity_modal()

    solution = post.load_solution(example_path)
    print(solution)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Modal Analysis Solution object.


    Data Sources
    ------------------------------
    DPF  DataSources: 
      Result files:
         result key: rst and path: /opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/ansys/dpf/core/examples/testing/modal_allKindOfComplexity.rst 
      Secondary files:


    DPF Model
    ------------------------------
    Modal analysis
    Unit system: MKS: m, kg, N, s, V, A, degC
    Physics Type: Mechanical
    Available results:
         -  displacement: Nodal Displacement
         -  reaction_force: Nodal Force   
         -  element_nodal_forces: ElementalNodal Element nodal Forces
         -  stress: ElementalNodal Stress 
         -  elemental_volume: Elemental Volume
         -  stiffness_matrix_energy: Elemental Energy-stiffness matrix
         -  artificial_hourglass_energy: Elemental Hourglass Energy
         -  thermal_dissipation_energy: Elemental thermal dissipation energy
         -  kinetic_energy: Elemental Kinetic Energy
         -  co_energy: Elemental co-energy
         -  incremental_energy: Elemental incremental energy
         -  elastic_strain: ElementalNodal Strain
         -  structural_temperature: ElementalNodal Temperature
    ------------------------------
    DPF  Meshed Region: 
      2388 nodes 
      1824 elements 
      Unit: m 
      With solid (3D) elements, shell (2D) elements, shell (3D) elements, beam (1D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 45 
    Cumulative     Frequency (Hz) LoadStep       Substep         
    1              4800.665229    1              1               
    2              6472.119402    1              2               
    3              10094.813112   1              3               
    4              15408.070193   1              4               
    5              19935.616102   1              5               
    6              30659.224027   1              6               
    7              33485.028985   1              7               
    8              40514.020302   1              8               
    9              41144.836724   1              9               
    10             41696.364343   1              10              
    11             42568.142453   1              11              
    12             48803.935725   1              12              
    13             51557.014600   1              13              
    14             54829.807966   1              14              
    15             55121.065060   1              15              
    16             55481.661956   1              16              
    17             55779.054274   1              17              
    18             56346.453210   1              18              
    19             56598.396154   1              19              
    20             57504.056787   1              20              
    21             57768.209089   1              21              
    22             60135.893137   1              22              
    23             62336.016111   1              23              
    24             62809.029190   1              24              
    25             64186.171203   1              25              
    26             64911.479227   1              26              
    27             66488.724651   1              27              
    28             66728.182829   1              28              
    29             67521.333063   1              29              
    30             68699.230845   1              30              
    31             70108.268581   1              31              
    32             71432.124756   1              32              
    33             71784.765113   1              33              
    34             73189.275762   1              34              
    35             74862.553459   1              35              
    36             75051.318416   1              36              
    37             76335.025905   1              37              
    38             76631.728520   1              38              
    39             76956.786796   1              39              
    40             77754.144888   1              40              
    41             78460.122703   1              41              
    42             78721.878185   1              42              
    43             79330.520798   1              43              
    44             80301.992725   1              44              
    45             80835.840814   1              45              

    This may contain complex results.




.. GENERATED FROM PYTHON SOURCE LINES 31-33

Get ``Result`` objects
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 35-39

Get displacement result
~~~~~~~~~~~~~~~~~~~~~~~
Get the displacement ``Result`` object. It contains a field for real values
and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default


    disp_result = solution.displacement()
    disp = disp_result.vector








.. GENERATED FROM PYTHON SOURCE LINES 44-47

Check number of fields
~~~~~~~~~~~~~~~~~~~~~~
Check the number of fields.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 51-52

**Get data from a field**

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    disp.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[-1.17102876, -1.30206342, -1.1938849 ],
              [-1.69750554, -1.68258886, -0.76327262],
              [-2.24465543, -2.66699745, -1.36365734],
              ...,
              [ 0.        ,  0.        ,  0.        ],
              [ 0.        ,  0.        ,  0.        ],
              [ 0.        ,  0.        ,  0.        ]])



.. GENERATED FROM PYTHON SOURCE LINES 56-59

Get maximum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the maximum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default


    disp.max_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[3.63870030e+05, 8.31378342e+20, 5.99358159e+21]])



.. GENERATED FROM PYTHON SOURCE LINES 63-66

Get minimum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the minimum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default


    disp.min_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[-3.55151557e+05, -8.31378342e+20, -5.99358159e+21]])



.. GENERATED FROM PYTHON SOURCE LINES 70-73

Get maximum data value over targeted field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the maximum data value over a targeted field.

.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default


    disp.get_max_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([3.63870030e+05, 8.31378342e+20, 5.99358159e+21])



.. GENERATED FROM PYTHON SOURCE LINES 77-80

Get minimum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the minimum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default


    disp.get_min_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([-3.55151557e+05, -8.31378342e+20, -5.99358159e+21])



.. GENERATED FROM PYTHON SOURCE LINES 84-88

Get stress result
-----------------
Get a stress result that deals with amplitude. It contains a field for real
values and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default


    stress_result = solution.stress()








.. GENERATED FROM PYTHON SOURCE LINES 92-95

Check if support has complex frequencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Check if the support has complex frequencies.

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: default


    stress_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 99-102

Get tensor result
~~~~~~~~~~~~~~~~~
Get the tensor result.

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default


    stress = stress_result.tensor
    stress.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 107-110

Get shell field
~~~~~~~~~~~~~~~
Get the shell field.

.. GENERATED FROM PYTHON SOURCE LINES 110-114

.. code-block:: default


    shell_field = stress[0]
    shell_field.shell_layers





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <shell_layers.nonelayer: 5>



.. GENERATED FROM PYTHON SOURCE LINES 115-118

Get solid field
~~~~~~~~~~~~~~~
Get the solid field.

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: default


    solid_field = stress[1]








.. GENERATED FROM PYTHON SOURCE LINES 122-125

Plot amplitude contour
~~~~~~~~~~~~~~~~~~~~~~
Plot the amplitude contour.

.. GENERATED FROM PYTHON SOURCE LINES 125-129

.. code-block:: default


    amplitude = stress_result.tensor_amplitude
    stress.plot_contour()




.. image-sg:: /examples/02-Legacy/images/sphx_glr_03-modal-analysis_001.png
   :alt: 03 modal analysis
   :srcset: /examples/02-Legacy/images/sphx_glr_03-modal-analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 130-134

Get elastic strain result
=========================
Get an elastic strain result that deals with phase. It contains a field for
real values and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 134-144

.. code-block:: default


    elastic_strain_result = solution.elastic_strain()
    elastic_strain = elastic_strain_result.tensor

    # Check number of fields
    # ~~~~~~~~~~~~~~~~~~~~~~
    # Check the number of shell and solid elements in distinct fields.

    elastic_strain.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 145-147

If the result file contains results, you can use this method
to get the elastic strain result.

.. GENERATED FROM PYTHON SOURCE LINES 147-149

.. code-block:: default


    print(solution.plastic_strain())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Complex tensor object.

    Tensor object.

    Object properties:
     - location   : Nodal

    Complex plastic strain object.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.378 seconds)


.. _sphx_glr_download_examples_02-Legacy_03-modal-analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03-modal-analysis.py <03-modal-analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03-modal-analysis.ipynb <03-modal-analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
