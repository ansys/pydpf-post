
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/05-Legacy/04-harmonic-analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_05-Legacy_04-harmonic-analysis.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_05-Legacy_04-harmonic-analysis.py:


.. _ref_harmonic_analysis:

Harmonic analysis
=================
This example shows how you can post-process a result file for a harmonic analysis
using PyDPF-Post.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

Perform required imports
------------------------
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 19-23

Get ``Solution`` object
-----------------------
Get the ``Solution`` object. This example loads a result file for an harmonic
analysis computed in Ansys Mechanical.

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: default


    example_path = examples.download_all_kinds_of_complexity()

    solution = post.load_solution(examples.complex_rst)
    print(solution)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Harmonic Analysis Solution object.


    Data Sources
    ------------------------------
    DPF  DataSources: 
      Result files:
         result key: rst and path: /opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/ansys/dpf/core/examples/result_files/complex.rst 
      Secondary files:


    DPF Model
    ------------------------------
    Harmonic analysis
    Unit system: MKS: m, kg, N, s, V, A, degC
    Physics Type: Mechanical
    Available results:
         -  displacement: Nodal Displacement
         -  reaction_force: Nodal Force   
         -  stress: ElementalNodal Stress 
         -  elemental_volume: Elemental Volume
         -  stiffness_matrix_energy: Elemental Energy-stiffness matrix
         -  artificial_hourglass_energy: Elemental Hourglass Energy
         -  thermal_dissipation_energy: Elemental thermal dissipation energy
         -  kinetic_energy: Elemental Kinetic Energy
         -  co_energy: Elemental co-energy
         -  incremental_energy: Elemental incremental energy
         -  elastic_strain: ElementalNodal Strain
         -  elemental_heat_generation: Elemental Elemental Heat Generation
         -  structural_temperature: ElementalNodal Structural temperature
         -  electric_potential: Nodal Electric Potential
         -  electric_flux_density: ElementalNodal Electric flux density
         -  electric_field: ElementalNodal Electric field
    ------------------------------
    DPF  Meshed Region: 
      4802 nodes 
      657 elements 
      Unit: m 
      With solid (3D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 1 
      With complex values 

    Cumulative     Frequency (Hz) LoadStep       Substep        RPM             
    1              343478.200000  1              1              0.000000        

    This may contain complex results.




.. GENERATED FROM PYTHON SOURCE LINES 30-32

Get ``Result`` objects
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 34-38

Get displacement result
~~~~~~~~~~~~~~~~~~~~~~~
Get the displacement ``Result`` object. It contains a field for real values
and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    disp_result = solution.displacement()
    disp = disp_result.vector








.. GENERATED FROM PYTHON SOURCE LINES 43-46

Check number of fields
~~~~~~~~~~~~~~~~~~~~~~
Check the number of fields.

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default


    disp.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 50-53

Get data from field
~~~~~~~~~~~~~~~~~~~
Get data from a field.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    disp.get_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[ 2.65783929e-09, -5.98949034e-10,  8.34267891e-11],
              [ 2.63846617e-09, -3.00204960e-10,  8.27306877e-11],
              [ 2.50179982e-09, -2.86371281e-10,  6.29386453e-11],
              ...,
              [-1.70840238e-09, -2.73504676e-09,  3.48706947e-11],
              [-1.57038405e-09, -2.71125223e-09,  6.79105278e-11],
              [-1.57311157e-09, -2.71904943e-09,  0.00000000e+00]])



.. GENERATED FROM PYTHON SOURCE LINES 57-60

Get maximum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the maximum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default


    disp.max_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[2.76941713e-09, 2.76940199e-09, 4.10914311e-10],
              [6.53706736e-13, 6.53416337e-13, 9.25220948e-14]])



.. GENERATED FROM PYTHON SOURCE LINES 64-67

Get minimum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the minimum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default


    disp.min_data





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([[-2.76946046e-09, -2.76952549e-09,  0.00000000e+00],
              [-6.53727285e-13, -6.53452004e-13, -1.66091913e-13]])



.. GENERATED FROM PYTHON SOURCE LINES 71-74

Get maximum data value over targeted field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the maximum data value over a targeted field.

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default


    disp.get_max_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([2.76941713e-09, 2.76940199e-09, 4.10914311e-10])



.. GENERATED FROM PYTHON SOURCE LINES 78-81

Get minimum data value over all fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the minimum data value over all fields.

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: default


    disp.get_min_data_at_field(0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DPFArray([-2.76946046e-09, -2.76952549e-09,  0.00000000e+00])



.. GENERATED FROM PYTHON SOURCE LINES 85-89

Get stress result
-----------------
Get a stress result that deals with amplitude. It contains a field for real
values and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: default


    stress_result = solution.stress()








.. GENERATED FROM PYTHON SOURCE LINES 93-96

Check if support has complex frequencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Check if the support has complex frequencies.

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default


    stress_result.has_complex_frequencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 100-103

Get tensor result
~~~~~~~~~~~~~~~~~
Get the ``Result`` for a tensor.

.. GENERATED FROM PYTHON SOURCE LINES 103-115

.. code-block:: default


    stress = stress_result.tensor

    # Check number of fields
    # ~~~~~~~~~~~~~~~~~~~~~~
    # Check the number of shell and solid elements in distinct fields. Shell and
    # solid elements are in distinct fields. Thus, you have four fields: the
    # solid-real one, the solid-imaginary one, the shell-real one, and the
    # shell-imaginary one.

    stress.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 116-119

Get shell field
~~~~~~~~~~~~~~~
Get the shell field.

.. GENERATED FROM PYTHON SOURCE LINES 119-123

.. code-block:: default


    shell_field = stress[0]
    shell_field.shell_layers





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <shell_layers.nonelayer: 5>



.. GENERATED FROM PYTHON SOURCE LINES 124-127

Get solid field
~~~~~~~~~~~~~~~~
Get the solid field.

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default


    solid_field = stress[1]








.. GENERATED FROM PYTHON SOURCE LINES 131-134

Plot amplitude contour
~~~~~~~~~~~~~~~~~~~~~~
Plot the amplitude contour.

.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: default


    amplitude = stress_result.tensor_amplitude
    amplitude.plot_contour()




.. image-sg:: /examples/05-Legacy/images/sphx_glr_04-harmonic-analysis_001.png
   :alt: 04 harmonic analysis
   :srcset: /examples/05-Legacy/images/sphx_glr_04-harmonic-analysis_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-143

Get elastic strain result
=========================
Get an elastic strain result that deals with phase. It contains a field for
real values and a field for imaginary values.

.. GENERATED FROM PYTHON SOURCE LINES 143-149

.. code-block:: default


    elastic_strain_result = solution.elastic_strain()
    elastic_strain = elastic_strain_result.tensor
    # shell and solid elements are in distinct fields.
    elastic_strain.num_fields





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 150-153

Define phase
~~~~~~~~~~~~
Define the phase. The phase must be a float value. The unit is degrees.

.. GENERATED FROM PYTHON SOURCE LINES 153-160

.. code-block:: default


    es_at_phase = elastic_strain_result.tensor_at_phase(39.0)
    es_at_phase.max_data
    es_at_phase.num_fields
    real_field = elastic_strain_result.tensor_at_phase(0.0)
    img_field = elastic_strain_result.tensor_at_phase(90.0)








.. GENERATED FROM PYTHON SOURCE LINES 161-163

If the result file contains results, you can use this method
to get the elastic strain result.

.. GENERATED FROM PYTHON SOURCE LINES 163-165

.. code-block:: default


    print(solution.elastic_strain())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Complex tensor object.

    Tensor object.

    Object properties:
     - location   : Nodal

    Complex elastic strain object.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.045 seconds)


.. _sphx_glr_download_examples_05-Legacy_04-harmonic-analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04-harmonic-analysis.py <04-harmonic-analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04-harmonic-analysis.ipynb <04-harmonic-analysis.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
